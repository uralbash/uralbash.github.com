.. web_programming documentation master file, created by
   sphinx-quickstart on Sun Mar 11 17:49:44 2012.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

************************************
Основы языка программирования Python
************************************

Pyhton высокоуровневый, интерпретируемый, интерактивный и
объектно-ориентированный язык программирования.

Python разработал Guido van Rossum в конце 80х начале 90х годов в Национальном
научно-исследовательском институте Математики и Компьютерных технологий в
Нидерландах.

.. image:: img/200px-Guido_van_Rossum_OSCON_2006.jpg

Python наследовал особенности многих других языков программирования, таких как ABC, Modula-3, C, C++, Algol-68, SmallTalk, Unix shell и другие скриптовые языки.

Python защищен авторским правом, код открыт под лицензией GNU General Public License (GPL).

Основные функции:
=================

* Легко выучить: Python имеет небольшое количество ключевых слов, простую структуру и строго определенный синтаксис. Это позволяет студентам выучить язык в течении небольшого промежутка времени.

* Простой синтаксис: Python код легко понять и просто читать.

* Простое сопровождение: Успех программ на Python заключается в его легком сопровождении.

* Большой набор стандартных библиотек: Одна из сильных сторон Python'а это наличие большого количества библиотек "из коробки", помимо этого они компактные и кросс-платформенный, работают на UNIX, Windows, и Macintosh.

* Интерактивный режим: Support for an interactive mode in which you can enter results from a terminal right to the language, allowing interactive testing and debugging of snippets of code.

* Портативный: Python может работать на различных аппаратных платформах и имеет везде одинаковый интерфейс.

* Расширяемый: Вы можете добавить низкоуровневые модули в интерпретатор Python.
  Эти модули позволяют программистам добавлять или настраивать свои
  инструменты, чтобы быть более эффективным.

* Базы данных: Python предоставляет интерфейсы для всех основных коммерческих
  баз данных.

* Программирование GUI: Python поддерживает GUI приложения, которые могут быть созданы и портированы на многие системные вызовы, библиотеки и оконные системы, такие как Windows, MFC, Macintosh, и система X Window в Unix.

* Масштабируемость: Python обеспечивает лучшую структуру и поддержку больших программ, чем shell сценарии.

Кроме вышеупомянутых особенностей, Python имеет большой список возможностей, некоторые из них перечислены ниже:

* Поддержка функционального и структурированного методов программирования, а также ООП.
* Он может быть использован в качестве скриптового языка или скомпилирован в байт-код для создания больших приложений.
* Очень высокого уровня динамические типы данных и динамическая проверка типов.
* Автоматический сборщик мусора.
* Легко встраивается в C, C++, COM, ActiveX, CORBA, и Java.

Установка Python:
=================

Все обновления, исходный код, бинарники, документация, новости, итд. доступно на оффициальном сайте:

`<http://www.python.org/>`_

Документация доступна в HTML, PDF и PostScript форматах.

`<www.python.org/doc/>`_

Первая программа на Python:
===========================

Зайдите в интерактивный режим, введите в коммандной строке "python"

.. code::

    root# python
    Python 2.5 (r25:51908, Nov  6 2007, 16:54:01)
    [GCC 4.1.2 20070925 (Red Hat 4.1.2-27)] on linux2
    Type "help", "copyright", "credits" or "license" for more info.
    >>>

Введите в интерактивном режиме:

.. code::

    >>> print "Hello, Python!"

Нажмите Enter и Вы увидите:

.. code::

    Hello, Python!

Идентификаторы в Python:
========================

Идентификатор используется для именования переменных, функций, классов, модулей
или других объектов. Идентификаторы начинаются с букв A-Z, a-z или
подчеркивания (_), за которыми следуют 0 или более букв или цифр (0-9).

Запрещено использовать знаки @, $ и % в идентификаторах. Все названия являются
регистрозависимыми. Таким образом user и User это два разных идентификатора в
Python'е.

Как правильно именовать идентификаторы:

* Имена классов начинаются с заглавной буквы, все остальные со строчной
* Идентификаторы начинающиеся с подчеркивания означают что он приватный
* Идентификаторы начинающиеся с двух подчеркиваний означают что он строго приватный
* Если едентификатор начинается и заканчивается двумя подчеркиваниями это
  означает спечиальное имя

Зарезервированные слова:
========================

Зарезервированные слова нельзя использовать для переменных, констант и других
идентификаторах

.. raw:: html

    <table cellpadding="5" border="1" class="src">
    <tbody><tr><td>and</td><td>exec</td><td>not</td></tr>
    <tr><td>assert</td><td>finally</td><td>or</td></tr>
    <tr><td>break</td><td>for</td><td>pass</td></tr>
    <tr><td>class</td><td>from</td><td>print</td></tr>
    <tr><td>continue</td><td>global</td><td>raise</td></tr>
    <tr><td>def</td><td>if</td><td>return</td></tr>
    <tr><td>del</td><td>import</td><td>try</td></tr>
    <tr><td>elif</td><td>in</td><td>while</td></tr>
    <tr><td>else</td><td>is</td><td>with </td></tr>
    <tr><td>except</td><td>lambda</td><td>yield</td></tr>
    </tbody></table>

Строки и отступы:
=================

Первое что бросается в глаза при изучении Python это отсутствие скобок для
обозначения блоков кода, классов и функций. Для их обозначения используются
отступы, данное написание должно строго соблюдаться.

Число пробелов в отступе может быть разным, но все выражения в блоке должны быть
смещены на то же количество пробелов.

.. code::

    if True:
        print "True" # 4 пробела
    else:
      print "False"  # 2 пробела

Этот пример вызовет ошибку синтаксиса

.. code::

    if True:
        print "Answer"
        print "True"
    else:
        print "Answer"  # отступ в 4 пробела
      print "False"     # Ошибка: 2 пробела в том же блоке, вместо 4х

Принято использовать для отступов 4 пробела, в частности заменять табуляцию 4мя
пробелами. Более подробно в pep8 `<http://www.python.org/dev/peps/pep-0008/>`_

Многострочные выражения:
========================

В Pyhton'е с каждой новой строки начинается новое выражение. Если Вам
необходимо поместить выражение в несколько строк то используйте знак "\\" для
переноса.

.. code::

    total = item_one + \
            item_two + \
            item_three

Выражения заключенные в скобки [], {}, () не нуждаются в знаке переноса.

.. code::

    days = ['Monday', 'Tuesday', 'Wednesday',
                 'Thursday', 'Friday']

Цитаты в Python'е
=================

Python поддерживает одинарные ('), двойные (") и тройный (''' или """) ковычки
для строк.

Тройные ковычки ипользуются многострочных строк.

.. code::

    word = 'слово'
    sentence = "Это предложение."
    paragraph = """Это параграф. Состоит
    нескольких строк и предложений."""

Комментариии в Python'е
=======================

Для комментирования строк используется решетка

.. code::

    #!/usr/bin/python

    # Первый коммент
    print "Hello, Python!";  # второй коммент

Результат

.. code::

    Hello, Python!

Комментарии магут находится после выражения

.. code::

    name = "Bla bla bla" # Это то же коммент

Еще пример

.. code::

    # This is a comment.
    # This is a comment, too.
    # This is a comment, too.
    # I said that already.

Для многострочных коментариев можно использовать тройные ковычки

.. code::

    """ это многострочный
        коммент.
        1
        2
        3
        4
        5
        конец коммента
    """
    print "Hello, Python"

Пустые строки:
==============

Строки содержащие только пробелы, возможно с комментариями, считаются пустыми и
Python полностью игнорирует их.

В интерактивном режиме для завершения многострочного выражения необходимо
ввести пустую строку.

Многострочные выражения в одной строке:
=======================================

Точка с запятой (;) позволяет использовать несколько выражений в одной строке.

.. code::

    import sys; x = 'foo'; sys.stdout.write(x + '\n')

Переменные:
===========

Присвоение значений выполняется при помощи знака ровно (=)

.. code::

    counter = 100          # Целое число
    miles   = 1000.0       # С плавающей точкой
    name    = "John"       # Строка

    print counter
    print miles
    print name

Стандартные типы данных:
========================

* числовой
* строковый
* список
* кортеж
* словарь

Числа:
======

.. code::

    var1 = 1
    var2 = 10

Python поддерживает 4 различных цифровых типов
* int (целые числа)
* long (расширенный диапазон целых чисел)
* float (числа с плавающей точкой)
* complex (комплексные числа)

Примеры:

.. raw:: html

    <table cellpadding="5" border="1" class="src">
    <tbody><tr><th>int</th><th>long</th><th>float</th><th>complex</th></tr>
    <tr><td>10</td><td>51924361L</td><td>0.0</td><td>3.14j</td></tr>
    <tr><td>100</td><td>-0x19323L</td><td>15.20</td><td>45.j</td></tr>
    <tr><td>-786</td><td>0122L</td><td>-21.9</td><td>9.322e-36j</td></tr>
    <tr><td>080</td><td>0xDEFABCECBDAECBFBAEl</td><td>32.3+e18</td><td>.876j</td></tr>
    <tr><td>-0490</td><td>535633629843L</td><td>-90.</td><td>-.6545+0J</td></tr>
    <tr><td>-0x260</td><td>-052318172735L</td><td>-32.54e100</td><td>3e+26J</td></tr>
    <tr><td>0x69</td><td>-4721885298529L</td><td>70.2-E12</td><td>4.53e-7j</td></tr>
    </tbody></table>

Строки:
=======

.. code::

    str = 'Hello World!'

    print str          # Напечатает строку
    print str[0]       # Напечатает 1ый символ строки
    print str[2:5]     # Напечатает симовлы с 3го по 6й
    print str[2:]      # Напечатает с 3го символа и до конца строки
    print str * 2      # Напечатать строку 2 раза
    print str + "TEST" # Конкатенация строк

Списки:
=======

.. code::

    #!/usr/bin/python

    list = [ 'abcd', 786 , 2.23, 'john', 70.2 ]
    tinylist = [123, 'john']

    print list          # Напечатает весь список
    print list[0]       # Напечатает первый элемент списка
    print list[1:3]     # Напечатает элементы со 2го по 4ый
    print list[2:]      # Напечатает элементы начиная с 3го
    print tinylist * 2  # Напечатает список 2 раза
    print list + tinylist # Конкатенация списков

Кортежи:
========

Кортежи похожи на списки, отличием является то что они предназначенны только
для чтения, за счет этого работаю быстрее.

.. code::

    tuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )
    tinytuple = (123, 'john')

    print tuple           # Напечатает полный список
    print tuple[0]        # Напечатает первый элемент списка
    print tuple[1:3]      # Напечатать элементы со 2го по 4ый
    print tuple[2:]       # Напечатать элементы начиная с 3го
    print tinytuple * 2   # Напечатать 2 раза
    print tuple + tinytuple # Конкатенация

Словари:
========

Словарь в Python это тип хэш-таблиц. Они работаю как ассоциативные маччивы или
хэши в Perl и состоят из пар ключ-значение.

.. code::

    tinydict = {'one': 'bla bla', 2: 'Hello', 'name': 'john','code':6734, 'dept': 'sales'}
    print dict['one']       # Напечатает значение для ключа 'one'
    print dict[2]           # Напечатает значение ключа 2
    print tinydict          # Напечатать весь словарь
    print tinydict.keys()   # Напечатать все ключи
    print tinydict.values() # Напечатать вск значения

Основные операторы в Python:
============================

a = 10, b = 20

.. raw:: html

    <table width="100%" cellspacing="0" cellpadding="5" border="1" class="src">
    <tbody><tr>
    <th width="10%">Оператор</th><th width="45%">Описание</th><th>Пример</th>
    </tr>
    <tr>
    <td>+</td><td>Добавление - складывает значения по обе стороны от оператора</td><td> a + b будет 30</td>
    </tr>
    <tr>
    <td>-</td><td>Вычитание - вычитает значение справа от оператора из значения слева от оператора</td><td> a - b будет -10</td>
    </tr>
    <tr>
    <td>*</td><td>Умножение - умножает значения с каждой стороны от оператора</td><td> a * b будет 200</td>
    </tr>
    <tr>
    <td>/</td><td>Деление - делит значение слева от оператора на значение справа от оператора</td><td> b / a будет 2</td>
    </tr>
    <tr>
    <td>%</td><td>Деление по модулю - делит значение слева от оператора на значение справа от оператора и возвращает остаток</td><td> b % a будет 0</td>
    </tr>
    <tr>
    <td>**</td><td>Возведение в степень - возводит значение слева от оператора в степень равной значению справа от оператора</td><td> a**b будет 10 в 20й степени</td>
    </tr>
    <tr>
    <td>//</td><td>Деление нацело - деление где результат будет целое число от дробного. Округление происходит при помощи функции math.floor</td><td> 9//2 будет 4 и 9.0//2.0 будет 4.0</td>
    </tr>
    <tr>
    <td>==</td><td> Проверяет значения по обе стороны оператора на равенство или нет, если равны то возвращает True.</td><td> a == b будет False. </td>
    </tr>
    <tr>
    <td>!=</td><td> Проверяет значения по обе стороны оператора на равенство или нет, если не равны то возвращает False.</td><td> a != b будет True. </td>
    </tr>
    <tr>
    <td>&lt;&gt;</td><td> Тоже самое что и !=.</td><td> (a &lt;&gt; b) будет True.</td>
    </tr>
    <tr>
    <td>&gt;</td><td> Проверяет что значение слева от оператора больше чем значение справа, если да то возвращает True.</td><td> a &gt; b будет False. </td>
    </tr>
    <tr>
    <td>&lt;</td><td> Проверяет что значение слева от оператора меньше чем значение справа, если да то возвращает True.</td><td> a &lt; b возвращает True. </td>
    </tr>
    <tr>
    <td>&gt;=</td><td>Проверяет что значение слева от оператора больше чем значение справа или равно, если да то возвращает True.</td><td> a &gt;= b будет False. </td>
    </tr>
    <tr>
    <td>&lt;=</td><td> Проверяет что значение слева от оператора меньше чем значение справа или равно, если да то возвращает True.</td><td> a &lt;= b будет True. </td>
    </tr>
    <tr>
    <td>=</td><td>Оператор присваивания, присваивает значение справа от оператора переменной слева от оператора</td><td> c = a + b, c будет равно 30</td>
    </tr>
    <tr>
    <td>+=</td><td>Оператор добавления и присваивания, добавляет значение справа от оператора значению слева от оператора и присваивает результат значению слева от оператора</td><td> c += a то же самое что c = c + a</td>
    </tr>
    <tr>
    <td>-=</td><td>Оператор вычитания и присваивания, вычитает значение справа от операторада из значеня слева от оператора и присваивает результат значению слева от оператора</td><td> c -= a то же самое что c = c - a</td>
    </tr>
    <tr>
    <td>*=</td><td>Оператор умножения и присваивания, перемножает значения
    справа и слева от оператора и присваивает результат значению слева</td>
    <td> c *= a то же самое что c = c * a</td>
    </tr>
    <tr>
    <td>/=</td><td>Оператор деления и присваивания, дели значение слева от оператора на значение справа от оператора и присваивает результат значению слева</td><td> c /= a то же самое что c = c / a</td>
    </tr>
    <tr>
    <td>%=</td><td>Оператор деления на ноль и присваивание, совершает деление по модулю и присваивает результат значению слева от оператора</td><td> c %= a то же самое что c = c % a</td>
    </tr>
    <tr>
    <td>**=</td><td>Оператор возведения в степень и присваивания, производит возведение в степень и присваивает результат значению слева от оператора</td><td> c **= a то же что c = c ** a</td>
    </tr>
    <tr>
    <td>//=</td><td>Деление нацело и присваивание</td><td> c //= a то же что c = c // a</td>
    </tr>
    <tr>
    <td>&amp;</td><td> Бинарное И </td><td> a &amp; b будет 12</td>
    </tr>
    <tr>
    <td>|</td><td> Бинарное ИЛИ. </td><td> a | b будет 61</td>
    </tr>
    <tr>
    <td>^</td><td> Бинарное исключающее ИЛИ. </td><td> a ^ b будет 49</td>
    </tr>
    <tr>
    <td>~</td><td> Поразрядное дополнение до единицы. </td><td> ~a будет -60.</td>
    </tr>
    <tr>
    <td>&lt;&lt;</td><td> Бинарный сдвиг влево.</td><td> a &lt;&lt; 2 будет 240</td>
    </tr>
    <tr>
    <td>&gt;&gt;</td><td> Бинарный сдвиг вправо.</td><td> a &gt;&gt; 2 будет 15</td>
    </tr>
    <tr>
    <td>and</td><td> Логическое И.</td><td> a and b будет true.</td>
    </tr>
    <tr>
    <td>or</td><td>Логическое ИЛИ.</td><td> a or b будет true.</td>
    </tr>
    <tr><td>not</td><td>Логическое отрицание.</td><td> not(a &amp;&amp; b) будет False. </td>
    </tr>
    <tr>
    <td>in</td><td>Возвращает True если находит элемент в заданной последовательности, иначе False.</td><td> x in y.</td>
    </tr>
    <tr>
    <td>not in</td><td>Возвращает False если находит элемент в заданной последовательности, иначе True.</td><td>x not in y.</td>
    </tr>
    <tr>
    <td>is</td><td>True если переменные по обе стороны оператора указывают на тот же объект, иначе False.</td><td> x is y.</td>
    </tr>
    <tr>
    <td>is not</td><td>False если переменные по обе стороны оператора указывают на тот же объект, иначе True.</td><td> x is not y.</td>
    </tr>
    </tbody></table>

Приоритеты операторов:
======================

В таблице перечислены все операторы начиная с высшего приоритета и заканчивая
низшим.

.. raw:: html

    <table cellpadding="5" border="1" class="src">
    <tbody><tr><th>Оператор</th><th>Описание</th></tr>
    <tr>
    <td>**</td>
    <td>Возведение в степень</td>
    </tr><tr>
    <td>~ + -</td>
    <td>Поразрядное дополнение, унарный плюс и минус</td>
    </tr><tr>
    <td>* / % //</td>
    <td>Умножение, деление, деление по модулю, деление нацело</td>
    </tr><tr>
    <td>+ -</td>
    <td>Сложение, вычитание</td>
    </tr><tr>
    <td>&gt;&gt; &lt;&lt;</td>
    <td>Сдвиги влево и вправо</td>
    </tr><tr>
    <td>&amp;</td>
    <td>Побитовый И</td>
    </tr><tr>
    <td>^ |</td>
    <td>Побитовые исключающее ИЛИ и обычное ИЛИ</td>
    </tr><tr>
    <td>&lt;= &lt; &gt; &gt;=</td>
    <td>Операторы сравнения</td>
    </tr><tr>
    <td>&lt;&gt; == !=</td>
    <td>Операторы равенства</td>
    </tr>
    <tr>
    <td>= %= /= //= -= += |= &amp;= &gt;&gt;= &lt;&lt;= *= **=</td>
    <td>Операторы присваивания</td>
    </tr>
    <tr>
    <td>is is not</td>
    <td>Операторы идентификации</td>
    </tr>
    <tr>
    <td>in not in</td>
    <td>Операторы принадлежности</td>
    </tr><tr>
    <td>note or and</td>
    <td>Логические операторы</td>
    </tr>
    </tbody></table>

Оператор if:
============

.. code::

    if expression:
       statement(s)

Оператор else:
==============

.. code::

    if expression:
       statement(s)
    else:
       statement(s)

Оператор elif:
==============

.. code::

    if expression1:
       statement(s)
    elif expression2:
       statement(s)
    elif expression3:
       statement(s)
    else:
       statement(s)

Вложенный if...elif...else:
===========================

.. code::

    if expression1:
       statement(s)
       if expression2:
          statement(s)
       elif expression3:
          statement(s)
       else
          statement(s)
    elif expression4:
       statement(s)
    else:
       statement(s)

Цикл while:
===========

.. code::

    while expression:
       statement(s)

Бесконечный цикл:
=================

.. code::

    while True:
        print "For quit push Ctrl-C"

Бесконечный цикл может быть полезен в клиент/серверном программировании где
сервер постоянно слушает порт.

Выражения в одну строку:
========================

.. code::

    while expression: statement

Цикл for:
=========

.. code::

    for iterating_var in sequence:
       statements(s)

Перебор списка

.. code::

    fruits = ['banana', 'apple',  'mango']
    for index in range(len(fruits)):
       print 'Current fruit :', fruits[index]

    print "Good bye!"


Классы:
=======

.. code::

    class ClassName:
       'Optional class documentation string'
       class_suite

* Этот класс имеет строку документации, которая доступна из метода ClassName.__doc__
* class_suite состоит из функции класса, атрибутов и всех его членов.

Создание объектов
=================

Для создания экземпляра класса, следует вызвать класс, используя имя класса и
передать в него аргументы которые находятся в методе __init__.

.. code::

    "This would create first object of Employee class"
    emp1 = Employee("Zara", 2000)
    "This would create second object of Employee class"
    emp2 = Employee("Manni", 5000)

Доступ к атрибутам:
===================



Вопросы?
========

.. raw:: html

    <iframe src="https://docs.google.com/spreadsheet/embeddedform?formkey=dHo2MmpkOGZiQVRhaWQ4dk9uUnF2dWc6MQ" width="760" height="389" frameborder="0" marginheight="0" marginwidth="0">Загрузка...</iframe>

Закрепление материала
=====================
**Задание1**

**Задание2**

**Задание3**

Домашнее задание
================

Ресурсы
=======
* `Язык программирования Python <http://www.intuit.ru/department/pl/python/>`_ Автор: Сузи Р.А
* `Сравнение Python с php, perl, ruby. Часть 1 <http://hyperpolyglot.org/scripting>`_
* `Сравнение Python с php, perl, ruby. Часть 2 <http://hyperpolyglot.org/scripting2>`_
* `Python для графовой теории <http://buzzard.pugetsound.edu/sage-practice/index.html>`_
* `Список ссылок на документацию по Python <http://python.objectis.net/>`_
* `Лекции по Python в Университете Сиднея <http://www.ug.it.usyd.edu.au/~comp5315/outline.html>`_
* Текстовый редактор vim для разработки программ на Python
* `Краткий справочник по Python <http://rgruet.free.fr/PQR27/PQR2.7.html>`_
* `TutorialPoint <http://www.tutorialspoint.com/python/index.htm>`_
